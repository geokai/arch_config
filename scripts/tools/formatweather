#!/bin/bash

#################################################################################
#### 
#### Update weather forecast and current weather information from
#### [Darksky](https://darksky.org)
#### 
#### This script accesses the darkweatherreport json file and extracts the
#### requires items of data.
#### These items of data are used to construct the weather block in the i3blocks
#### status bar, and for the notification pop-up when the weather block is
#### left-clicked.
#### 
#################################################################################

#################################################################################
#### 
#### Author: George Kaimakis - https://github.com/geokai
#### This file was created on 18 Apr 2020
#### 
#################################################################################


# hide/restore the cursor:
# trap 'tput cnorm; ' SIGTERM    # restore cursor on interupt
# tput civis                  # hide cursor


## darksky decimal percentages, 0 - 1 % ##
# example percentages, 1    == 100%
#                      0.1  ==  10%
#                      0.7  ==  70%
#                      0.78 ==  78%
#                      0.07 ==   7%
#                      0.01 ==   1%
#                      0    ==   0%
# convert decimal percentages to human readable:
_percentage(){
    if [ ${#1} == 1 ] && [ $1 -eq 0 ]; then
        _result=0
        echo $_result && return
    fi
    if [ ${#1} == 1 ] && [ $1 -eq 1 ]; then
        _result=$(($1 * 100))
        echo $_result
    elif [ ${#1} -gt 1 ]; then
        _int_result="$(echo $1 | sed -e 's/^0//;s/\.//')"
        if [ ${#_int_result} == 1 ]; then
            _result="$(echo $_int_result | sed 's/$/0/')"
            echo $_result
        else
            _result="$(echo $_int_result | sed 's/^0//')"
            echo $_result
        fi
    fi
}


# remove quote marks from string values:
_stringify(){
    _stringed="$(echo $1 | sed 's/\"//g')"
    echo $_stringed
}


# determine state - whether value is rising, falling, or static:
_state(){
    if [ "$2" -lt "$1" ]; then
        _next_state="Falling"
        echo $_next_state
    elif [ "$2" -gt "$1" ]; then
        _next_state="Rising"
        echo $_next_state
    else
        _next_state="Static"
        echo $_next_state
    fi
}


_weatherData=$1
[[ -s $_weatherData ]] || { dunstify " " "Weather Information Not Available." && exit 1; }


## format darksky weather infomation:
## access json file and retrieve data:

# currently:
echo "CURRENTLY"
# _time="$(jq '.currently.time | strflocaltime("%F %T")' $_weatherData)" && \
_time="$(date --date=@"$(jq '.currently.time' $_weatherData)" '+%F %T %Z')" && \
    # _str_time="$(_stringify "$_time")"
    printf "%s\t%s\n" "  Time of Report:" "$_time"
_cu_summary="$(jq '.currently.summary' $_weatherData)" && \
    _str_summary="$(_stringify "$_cu_summary")"
    printf "%s:\t\t%s\n" "  Summary" "$_str_summary"
_cu_temperature="$(jq '.currently.temperature' $_weatherData)" && \
    printf "%s:\t\t\t%.1f C\n" "  Temp" "$_cu_temperature"
_cu_pressure="$(jq '.currently.pressure' $_weatherData)" && \
    printf "%s:\t\t%s %s\n" "  Pressure" "$_cu_pressure" "mb/hPa"
_cu_humidity="$(jq '.currently.humidity' $_weatherData)" && \
    _int_humidity="$(_percentage $_cu_humidity)"
    printf "%s:\t\t%s %s\n" "  Humidity" "$_int_humidity" "%RH"
# _cu_precipProbability="$(jq '.currently.precipProbability' $_weatherData)" && \
#     _int_precipProbability="$(_percentage $_cu_precipProbability)"
#     printf "%s:\t\t%s %s\n" "  Precip Prob" "$_int_precipProbability" "%"
_cu_windSpeed="$(jq '.currently.windSpeed' $_weatherData)" && \
    printf "%s:\t\t%.2f %s\n" "  Windspeed" "$_cu_windSpeed" "m/s"
_cu_windGust="$(jq '.currently.windGust' $_weatherData)" && \
    printf "%s:\t\t%.2f %s\n" "  Wind Gust" "$_cu_windGust" "m/s"
_cu_windBearing="$(jq '.currently.windBearing' $_weatherData)" && \
    printf "%s:\t\t%s %s\n" "  Wind Bearing" "$_cu_windBearing" "Deg"
_cu_cloudCover="$(jq '.currently.cloudCover' $_weatherData)" && \
    _int_cloudCover="$(_percentage $_cu_cloudCover)"
    printf "%s:\t\t%s %s\n" "  Cloud Cover" "$_int_cloudCover" "%"
# _cu_uvIndex="$(jq '.currently.uvIndex' $_weatherData)" && \
#     printf "%s:\t\t%s\n" "  UV Index" "$_cu_uvIndex"
echo


# hourly:
echo "HOURLY"
_hr_time="$(jq -r '.hourly.data[0].time | strflocaltime("%H%M")' $_weatherData)" && \
    printf "%s:\t\t%s %s\n" "  Forcast for" "$_hr_time" "hrs"
_hr_summary="$(jq '.hourly.data[0].summary' $_weatherData)" && \
    _str_summary="$(_stringify "$_hr_summary")"
    printf "%s:\t\t%s\n" "  Summary" "$_str_summary"
_hr_temperature_now="$(jq '.hourly.data[0].temperature' $_weatherData)" && \
# _hr_temperature_next="$(jq '.hourly.data[1].temperature' $_weatherData)"
    printf "%s:\t\t\t%.1f C\n" "  Temp" "$_hr_temperature_now"
_hr_precipProbability="$(jq '.hourly.data[0].precipProbability' $_weatherData)" && \
    _int_hr_precipProbability="$(_percentage $_hr_precipProbability)"
    printf "%s:\t\t%s %s\n" "  Precip Prob" "$_int_hr_precipProbability" "%"
_hr_humidity_now="$(jq '.hourly.data[0].humidity' $_weatherData)" && \
    _int_hr_humidity_now="$(_percentage $_hr_humidity_now)"
    printf "%s:\t\t%s %s\n" "  Humidity" "$_int_hr_humidity_now" "%RH  "
# _hr_windSpeed="$(jq '.hourly.data[0].windSpeed' $_weatherData)"
# _hr_windBearing="$(jq '.hourly.data[0].windBearing' $_weatherData)"
_hr_cloudCover="$(jq '.hourly.data[0].cloudCover' $_weatherData)" && \
    _int_hr_cloudCover="$(_percentage $_hr_cloudCover)"
    printf "%s:\t\t%s %s\n" "  Cloud Cover" "$_int_hr_cloudCover" "%"
_hr_uvIndex="$(jq '.hourly.data[0].uvIndex' $_weatherData)" && \
    printf "%s:\t\t%s\n" "  UV Index" "$_hr_uvIndex"
echo


# daily:
echo "DAILY"
_d_time="$(date --date=@"$(jq -r '.daily.data[0].time' $_weatherData)" '+%a %d %b %Y')" && \
    printf "%s:\t\t%s\n" "  Forcast for" "$_d_time"
_d_summary="$(jq '.daily.data[0].summary' $_weatherData)" && \
    _str_summary="$(_stringify "$_d_summary")"
    printf "%s:\t\t%s\n" "  Summary" "$_str_summary"
# _d_sunriseTime="$(jq '.daily.data[0].sunriseTime' $_weatherData)"
# _d_sunsetTime="$(jq '.daily.data[0].sunsetTime' $_weatherData)"
# _d_moonPhase="$(jq '.daily.data[0].moonPhase' $_weatherData)"
_d_temperatureHigh="$(jq '.daily.data[0].temperatureHigh' $_weatherData)"
_d_temperatureHighTime="$(jq -r '.daily.data[0].temperatureHighTime | strflocaltime("%H:%M")' $_weatherData)" && \
    printf "%s:\t\t%.1f C\t@ %s\n" "  Temp High" "$_d_temperatureHigh" "$_d_temperatureHighTime"
# _d_temperatureLow="$(jq '.daily.data[0].temperatureLow' $_weatherData)"
_d_precipProbability="$(jq '.daily.data[0].precipProbability' $_weatherData)"
    _int_d_precipProbability="$(_percentage $_d_precipProbability)"
_d_precipIntensitiyMaxTime="$(date --date=@"$(jq -r '.daily.data[0].precipIntensityMaxTime' $_weatherData)" '+%H:%M')" && \
    printf "%s:\t\t%s %s\t@ %s\n" "  Precip Prob" "$_int_d_precipProbability" "%" "$_d_precipIntensitiyMaxTime"
_d_precipType="$(jq -r '.daily.data[0].precipType' $_weatherData)" && \
    printf "%s:\t\t%s\n" "  Precip Type" "$_d_precipType"
# _d_cloudCover="$(jq '.daily.data[0].cloudCover' $_weatherData)"
_d_uvIndex="$(jq '.daily.data[0].uvIndex' $_weatherData)"
_d_uvIndexTime="$(jq -r '.daily.data[0].uvIndexTime | strflocaltime("%H:%M")' $_weatherData)" && \
    printf "%s:\t\t%s\t@ %s\n" "  Max uvIndex" "$_d_uvIndex" "$_d_uvIndexTime"
echo


# additional info:
#   location

# units:
#   _degC
#   _mB/hPa
#   _%RH
#   _%
#   _m/s
#   _degs
#   _%


# vim: ft=sh
